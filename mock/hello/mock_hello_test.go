// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/63isOK/foot-print/mock/hello (interfaces: Hi)

// Package hello_test is a generated GoMock package.
package hello_test

import (
	reflect "reflect"

	hello "github.com/63isOK/foot-print/mock/hello"
	gomock "github.com/golang/mock/gomock"
)

// MockHi is a mock of Hi interface.
type MockHi struct {
	ctrl     *gomock.Controller
	recorder *MockHiMockRecorder
}

// MockHiMockRecorder is the mock recorder for MockHi.
type MockHiMockRecorder struct {
	mock *MockHi
}

// NewMockHi creates a new mock instance.
func NewMockHi(ctrl *gomock.Controller) *MockHi {
	mock := &MockHi{ctrl: ctrl}
	mock.recorder = &MockHiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHi) EXPECT() *MockHiMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHi) Hello(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockHiMockRecorder) Hello(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHi)(nil).Hello), arg0)
}

// HelloAgain mocks base method.
func (m *MockHi) HelloAgain(arg0, arg1 string) hello.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloAgain", arg0, arg1)
	ret0, _ := ret[0].(hello.UserInfo)
	return ret0
}

// HelloAgain indicates an expected call of HelloAgain.
func (mr *MockHiMockRecorder) HelloAgain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloAgain", reflect.TypeOf((*MockHi)(nil).HelloAgain), arg0, arg1)
}
